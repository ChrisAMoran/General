<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Milestone Configuration</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 20px;
        }
        .header-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        .save-button {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }
        .save-button:hover {
            background-color: #218838;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f4f4f4;
        }
        tr.draggable {
            cursor: move;
        }
        tr.dragging {
            opacity: 0.5;
            background-color: #f8f9fa;
        }
        .controls {
            margin-bottom: 20px;
        }
        select, input[type="text"], input[type="date"] {
            width: 90%;
            padding: 4px;
        }
        .url-updated {
            background-color: yellow !important;
            transition: background-color 0.7s;
        }
        .row-error {
            background-color: #ffd6d6 !important;
        }
        button {
            margin: 2px;
            padding: 5px 10px;
            cursor: pointer;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.4);
        }
        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 50%;
            text-align: center;
        }
        .toast {
            visibility: hidden;
            min-width: 250px;
            text-align: center;
            border-radius: 4px;
            padding: 16px;
            position: fixed;
            z-index: 1;
            right: 30px;
            top: 30px;
            background-color: #333;
        }
        .toast.success {
            color: #28a745;
            background-color: white;
            border: 1px solid #28a745;
        }
        .toast.show {
            visibility: visible;
            -webkit-animation: fadein 0.5s;
            animation: fadein 0.5s;
        }
        .toast.error {
            color: #b20000;
            background-color: #fff4f4;
            border: 1px solid #b20000;
        }
        @-webkit-keyframes fadein {
            from {top: 0; opacity: 0;} 
            to {top: 30px; opacity: 1;}
        }
        @keyframes fadein {
            from {top: 0; opacity: 0;}
            to {top: 30px; opacity: 1;}
        }
    </style>
</head>
<body>
    <div class="header-container">
        <h1>Milestone Configuration</h1>
        <button class="save-button" onclick="saveChanges()">Approve</button>
    </div>
    
    <div class="controls">
        <button onclick="showOptOutModal()" class="opt-out-btn">Opt out of Niche Yield Campaign Messaging</button>
    </div>

    <div id="optOutModal" class="modal">
        <div class="modal-content">
            <h2>Do you want to opt out of Niche Yield Campaign Messages?</h2>
            <button onclick="confirmOptOut()">Yes</button>
            <button onclick="closeModal()">No</button>
        </div>
    </div>

    <div id="toast" class="toast"></div>

    <table id="milestonesTable">
        <thead>
            <tr>
                <th>Order</th>
                <th>Milestone Name</th>
                <th>Display Name</th>
                <th>Due Date</th>
                <th>Status</th>
                <th>Required/Optional</th>
                <th>URL</th>
            </tr>
        </thead>
        <tbody id="milestonesBody">
        </tbody>
    </table>

    <script>
        // Helper for formatting date to yyyy-mm-dd for <input type="date">
        function formatDateForInput(val) {
            if (!val) return "";
            // Accept mm/dd/yyyy or yyyy-mm-dd
            if (/^\d{4}-\d{2}-\d{2}$/.test(val)) return val;
            const match = val.match(/^(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})$/);
            if (match) {
                let [_, mm, dd, yyyy] = match;
                if (mm.length === 1) mm = "0" + mm;
                if (dd.length === 1) dd = "0" + dd;
                return `${yyyy}-${mm}-${dd}`;
            }
            return "";
        }

        // Helper for displaying date as mm/dd/yyyy
        function formatDateForDisplay(val) {
            if (!val) return "";
            const d = new Date(val);
            if (!(d instanceof Date) || isNaN(d)) return val;
            let mm = d.getMonth() + 1, dd = d.getDate(), yyyy = d.getFullYear();
            if (mm < 10) mm = "0" + mm;
            if (dd < 10) dd = "0" + dd;
            return `${mm}/${dd}/${yyyy}`;
        }

        let milestones = [
            { order: 1, milestoneName: "Schedule a Visit", displayName: "Schedule Campus Visit", dueDate: "", status: "Active", required: "Optional", url: "https://visit.example.com" },
            { order: 2, milestoneName: "Start/Finish Application", displayName: "Complete Application", dueDate: "", status: "Active", required: "Required", url: "https://apply.example.com" },
            { order: 3, milestoneName: "Submit Transcripts", displayName: "Upload Transcripts", dueDate: "", status: "Active", required: "Optional", url: "https://transcripts.example.com" },
            { order: 4, milestoneName: "Talk to Counselor", displayName: "Counselor Meeting", dueDate: "", status: "Active", required: "Optional", url: "https://counselor.example.com" },
            { order: 5, milestoneName: "Understand Costs", displayName: "Cost Calculator", dueDate: "", status: "Active", required: "Optional", url: "https://costs.example.com" },
            { order: 6, milestoneName: "Complete FAFSA", displayName: "FAFSA Application", dueDate: "", status: "Active", required: "Optional", url: "https://fafsa.gov" },
            { order: 7, milestoneName: "Complete Onboarding Forms", displayName: "Onboarding", dueDate: "", status: "Active", required: "Optional", url: "https://onboarding.example.com" },
            { order: 8, milestoneName: "Deposit", displayName: "Pay Deposit", dueDate: "", status: "Active", required: "Required", url: "https://payment.example.com" }
        ];

        // Store the original URL values to check for changes
        let originalUrls = milestones.map(m => m.url);
        // Track which URLs have been changed for yellow highlight
        let urlUpdatedFlags = milestones.map(_ => false);

        // Track which row has due date error
        let dueDateErrorFlags = milestones.map(_ => false);

        function renderTable() {
            const tbody = document.getElementById('milestonesBody');
            tbody.innerHTML = '';
            milestones.forEach((milestone, index) => {
                const urlCellClass = urlUpdatedFlags[index] ? "url-updated" : "";
                const rowClass = dueDateErrorFlags[index] ? "row-error" : "";
                const dateVal = milestone.dueDate ? milestone.dueDate : "";
                row = document.createElement('tr');
                row.className = `draggable ${rowClass}`;
                row.draggable = true;
                row.setAttribute('data-index', index);

                // For browsers, input[type=date] will show the native picker, but user can still type mm/dd/yyyy.
                row.innerHTML = `
                    <td>${milestone.order}</td>
                    <td>${milestone.milestoneName}</td>
                    <td>
                        <input type="text" value="${milestone.displayName.replace(/"/g, '&quot;')}" 
                            onchange="updateDisplayName(${index}, this.value)">
                    </td>
                    <td>
                        <input 
                            type="text"
                            placeholder="mm/dd/yyyy"
                            value="${milestone.dueDate ? formatDateForDisplay(milestone.dueDate) : ''}"
                            onfocus="this.type='date'; this.value='${formatDateForInput(milestone.dueDate)}';"
                            onblur="this.type='text'; if(this.value) this.value=formatDateForDisplay(this.value);"
                            onchange="updateDueDate(${index}, this.value, this)">
                    </td>
                    <td>
                        <select onchange="updateStatus(${index}, this.value)">
                            <option value="Active" ${milestone.status === 'Active' ? 'selected' : ''}>Active</option>
                            <option value="Inactive" ${milestone.status === 'Inactive' ? 'selected' : ''}>Inactive</option>
                        </select>
                    </td>
                    <td>
                        <select onchange="updateRequired(${index}, this.value)">
                            <option value="Required" ${milestone.required === 'Required' ? 'selected' : ''}>Required</option>
                            <option value="Optional" ${milestone.required === 'Optional' ? 'selected' : ''}>Optional</option>
                        </select>
                    </td>
                    <td class="${urlCellClass}">
                        <input type="text" value="${milestone.url}" 
                            onchange="updateURL(${index}, this.value, this)">
                    </td>
                `;
                tbody.appendChild(row);
            });

            setupDragAndDrop();
        }

        function updateDisplayName(index, value) {
            milestones[index].displayName = value;
        }

        function updateDueDate(index, value, input) {
            // Accept both yyyy-mm-dd and mm/dd/yyyy
            let dateStr = value;
            // If user typed mm/dd/yyyy, convert to yyyy-mm-dd for storage
            if (/^\d{2}\/\d{2}\/\d{4}$/.test(value)) {
                const [mm, dd, yyyy] = value.split('/');
                dateStr = `${yyyy}-${mm}-${dd}`;
            }
            // If user typed single digit month/day
            else if (/^\d{1}\/\d{2}\/\d{4}$/.test(value)) {
                let [mm, dd, yyyy] = value.split('/');
                if (mm.length === 1) mm = "0" + mm;
                dateStr = `${yyyy}-${mm}-${dd}`;
            }
            else if (/^\d{2}\/\d{1}\/\d{4}$/.test(value)) {
                let [mm, dd, yyyy] = value.split('/');
                if (dd.length === 1) dd = "0" + dd;
                dateStr = `${yyyy}-${mm}-${dd}`;
            }
            // Native date input (yyyy-mm-dd)
            else if (/^\d{4}-\d{2}-\d{2}$/.test(value)) {
                dateStr = value;
            }
            // else just store as is (will be invalid)
            milestones[index].dueDate = dateStr;
        }

        function setupDragAndDrop() {
            const tbody = document.getElementById('milestonesBody');
            const rows = tbody.getElementsByClassName('draggable');

            Array.from(rows).forEach(row => {
                row.addEventListener('dragstart', handleDragStart);
                row.addEventListener('dragenter', handleDragEnter);
                row.addEventListener('dragover', handleDragOver);
                row.addEventListener('dragleave', handleDragLeave);
                row.addEventListener('drop', handleDrop);
                row.addEventListener('dragend', handleDragEnd);
            });
        }

        let draggedRow = null;

        function handleDragStart(e) {
            draggedRow = this;
            this.classList.add('dragging');
        }

        function handleDragOver(e) {
            e.preventDefault();
        }

        function handleDragEnter(e) {
            e.preventDefault();
            this.classList.add('dragover');
        }

        function handleDragLeave(e) {
            this.classList.remove('dragover');
        }

        function handleDrop(e) {
            e.preventDefault();
            this.classList.remove('dragover');
            
            if (draggedRow !== this) {
                const allRows = [...document.getElementsByClassName('draggable')];
                const draggedIndex = parseInt(draggedRow.getAttribute('data-index'));
                const droppedIndex = parseInt(this.getAttribute('data-index'));
                
                // Update the milestones array
                const [movedMilestone] = milestones.splice(draggedIndex, 1);
                milestones.splice(droppedIndex, 0, movedMilestone);

                // Update originalUrls and urlUpdatedFlags accordingly
                const [movedUrl] = originalUrls.splice(draggedIndex, 1);
                originalUrls.splice(droppedIndex, 0, movedUrl);
                const [movedFlag] = urlUpdatedFlags.splice(draggedIndex, 1);
                urlUpdatedFlags.splice(droppedIndex, 0, movedFlag);

                const [movedErrorFlag] = dueDateErrorFlags.splice(draggedIndex, 1);
                dueDateErrorFlags.splice(droppedIndex, 0, movedErrorFlag);

                // Update order numbers
                milestones.forEach((milestone, idx) => {
                    milestone.order = idx + 1;
                });
                
                renderTable();
            }
        }

        function handleDragEnd(e) {
            this.classList.remove('dragging');
            draggedRow = null;
        }

        function updateStatus(index, value) {
            milestones[index].status = value;
        }

        function updateRequired(index, value) {
            milestones[index].required = value;
        }

        function updateURL(index, value, inputElem) {
            milestones[index].url = value;
            urlUpdatedFlags[index] = (value !== originalUrls[index]);
            // Re-render the table to show highlight
            renderTable();
            // Optionally, keep focus on the input just edited
            setTimeout(() => {
                const tbody = document.getElementById('milestonesBody');
                if (tbody.children[index]) {
                    const urlInput = tbody.children[index].querySelector('input[type="text"]:not([placeholder])');
                    if (urlInput) urlInput.focus();
                }
            }, 0);
        }

        function showOptOutModal() {
            document.getElementById('optOutModal').style.display = "block";
        }

        function closeModal() {
            document.getElementById('optOutModal').style.display = "none";
        }

        function confirmOptOut() {
            closeModal();
            showToast("You have successfully opted out of Niche Yield Campaign Messages.", true);
        }

        function saveChanges() {
            // Validate Due Dates
            let hasError = false;
            // Clear all row errors first
            dueDateErrorFlags = milestones.map(_ => false);

            let today = new Date();
            today.setHours(0,0,0,0);

            milestones.forEach((milestone, idx) => {
                if (milestone.dueDate && milestone.dueDate !== "") {
                    // Accept only yyyy-mm-dd or mm/dd/yyyy
                    let d = null;
                    if (/^\d{4}-\d{2}-\d{2}$/.test(milestone.dueDate)) {
                        d = new Date(milestone.dueDate + "T00:00:00");
                    } else if (/^\d{2}\/\d{2}\/\d{4}$/.test(milestone.dueDate)) {
                        let [mm, dd, yyyy] = milestone.dueDate.split('/');
                        d = new Date(`${yyyy}-${mm}-${dd}T00:00:00`);
                    } else {
                        // Invalid format
                        dueDateErrorFlags[idx] = true;
                        hasError = true;
                        return;
                    }
                    if (!(d instanceof Date) || isNaN(d) || d <= today) {
                        dueDateErrorFlags[idx] = true;
                        hasError = true;
                    }
                }
            });

            renderTable();

            if (hasError) {
                showToast('Error: Due Dates must be in the future. Please edit and then select "Approve" again.', false, true);
                return;
            }
            showToast("Milestone Configuration approved", true);
            // After approval, reset originalUrls and urlUpdatedFlags, and clear error highlights
            originalUrls = milestones.map(m => m.url);
            urlUpdatedFlags = milestones.map(_ => false);
            dueDateErrorFlags = milestones.map(_ => false);
            renderTable();
        }

        function showToast(message, success = false, error = false) {
            const toast = document.getElementById("toast");
            toast.textContent = message;
            toast.className = "toast" 
                + (success ? " success" : "") 
                + (error ? " error" : "") 
                + " show";
            setTimeout(() => {
                toast.className = toast.className.replace("show", "");
            }, 3500);
        }

        // Close modal if clicking outside of it
        window.onclick = function(event) {
            const modal = document.getElementById('optOutModal');
            if (event.target == modal) {
                closeModal();
            }
        }

        // Initial render
        renderTable();
    </script>
</body>
</html>
